package models

import (
	"database/sql"
	"fmt"
	"time"
)

type BellevueActivities []*BellevueActivity

func NewBellevueActivity() *BellevueActivity {
	return &BellevueActivity{
		Date: time.Now(),
	}
}

// This struct keeps track of things you need to pay for.
type BellevueActivity struct {
	ID           int // auto-generated by postgres
	Date         time.Time
	Breakfasts   int
	LunchDinners int
	Coffees      int
	Saunas       int
	Lectures     int
	Comment      string
	TotalPrice   int // in Rappen => CHF => float64(TotalCost) / 100.0
}

func (a *BellevueActivity) CalculatePrice() {
	// TODO: Define prices elsewhere, WebForm->DB? YAML?
	//       But keep it simple for now x)
	prices := map[string]int{
		"breakfast":       800,
		"lunch-or-dinner": 1100,
		"coffee":          100,
		"sauna":           750,
		"lecture":         1200,
	}

	a.TotalPrice = (a.Breakfasts*prices["breakfast"] +
		a.LunchDinners*prices["lunch-or-dinner"] +
		a.Coffees*prices["coffee"] +
		a.Saunas*prices["sauna"] +
		a.Lectures*prices["lecture"])
}

type BellevueActivityModel struct {
	DB *sql.DB
}

func (m *BellevueActivityModel) Insert(a *BellevueActivity) error {
	stmt := `
	INSERT INTO website.bellevue_activities (
		activity_date,
		breakfast_count,
		lunch_dinner_count,
		coffee_count,
		sauna_count,
		lecture_count,
		comment,
		total_price
	) VALUES (
		$1, $2, $3, $4, $5, $6, $7, $8
	);
	`

	a.CalculatePrice()

	_, err := m.DB.Exec(
		stmt,
		a.Date,
		a.Breakfasts,
		a.LunchDinners,
		a.Coffees,
		a.Saunas,
		a.Lectures,
		a.Comment,
		a.TotalPrice,
	)
	if err != nil {
		return fmt.Errorf("failed executing insert sql: %v", err)
	}

	return nil
}
