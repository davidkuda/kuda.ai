package models

import (
	"database/sql"
	"fmt"
	"time"
)

type BellevueActivities []BellevueActivity

// This struct keeps track of things you need to pay for.
type BellevueActivity struct {
	ID         int // auto-generated by postgres
	UserID     int
	Date       time.Time
	Breakfasts int
	Lunches    int
	Dinners    int
	Coffees    int
	Saunas     int
	Lectures   int
	Comment    string
	TotalPrice int // in Rappen => CHF => float64(TotalCost) / 100.0
}

func NewBellevueActivity() *BellevueActivity {
	return &BellevueActivity{
		Date: time.Now(),
	}
}

func (a *BellevueActivity) CalculatePrice() {
	// TODO: Define prices elsewhere, WebForm->DB? YAML?
	//       But keep it simple for now x)
	prices := map[string]int{
		"breakfast": 800,
		"lunch":     1100,
		"dinner":    1100,
		"coffee":    100,
		"sauna":     750,
		"lecture":   1200,
	}

	a.TotalPrice = (a.Breakfasts*prices["breakfast"] +
		a.Lunches*prices["lunch"] +
		a.Dinners*prices["dinner"] +
		a.Coffees*prices["coffee"] +
		a.Saunas*prices["sauna"] +
		a.Lectures*prices["lecture"])
}

type BellevueActivityModel struct {
	DB *sql.DB
}

func (m *BellevueActivityModel) Insert(a *BellevueActivity) error {
	stmt := `
	INSERT INTO website.bellevue_activities (
		user_id,
		activity_date,
		breakfast_count,
		lunch_count,
		dinner_count,
		coffee_count,
		sauna_count,
		lecture_count,
		comment,
		total_price
	) VALUES (
		$1, $2, $3, $4, $5, $6, $7, $8, $9, $10
	);
	`

	a.CalculatePrice()

	_, err := m.DB.Exec(
		stmt,
		a.UserID,
		a.Date,
		a.Breakfasts,
		a.Lunches,
		a.Dinners,
		a.Coffees,
		a.Saunas,
		a.Lectures,
		a.Comment,
		a.TotalPrice,
	)
	if err != nil {
		return fmt.Errorf("failed executing insert sql: %v", err)
	}

	return nil
}

func (m *BellevueActivityModel) GetAllByUser(userID int) (BellevueActivities, error) {
	stmt := `
	SELECT
		id,
		activity_date,
		breakfast_count,
		lunch_count,
		dinner_count,
		coffee_count,
		sauna_count,
		lecture_count,
		total_price,
		comment
	FROM website.bellevue_activities
	WHERE user_id = $1
	ORDER BY activity_date DESC
	`

	rows, err := m.DB.Query(stmt, userID)
	if err != nil {
		return nil, fmt.Errorf("DB.Query(stmt): %v", err)
	}

	defer rows.Close()

	var bas BellevueActivities

	for rows.Next() {
		var ba BellevueActivity
		err = rows.Scan(
			&ba.ID,
			&ba.Date,
			&ba.Breakfasts,
			&ba.Lunches,
			&ba.Dinners,
			&ba.Coffees,
			&ba.Saunas,
			&ba.Lectures,
			&ba.TotalPrice,
			&ba.Comment,
		)
		if err != nil {
			return nil, fmt.Errorf("for rows.Next(): %v", err)
		}
		bas = append(bas, ba)
	}

	if err = rows.Err(); err != nil {
		return nil, fmt.Errorf("rows.Err(): %v", err)
	}

	return bas, nil
}
