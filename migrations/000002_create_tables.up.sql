BEGIN;

SET ROLE dev;


create schema if not exists website;

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- CONTENT

CREATE TYPE content_type AS ENUM (
    'song',
    'blog',
    'til'
);

create table website.content (
    id integer generated by default as identity primary key,
    creation_date date,
    content_type content_type,
    content_id text,
    title text
);


-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- SONGBOOK

create table website.songs (
    id text primary key unique,
    artist text,
    name text,
    lyrics text,
    chords text,
    copyright text
);

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- BLOG

-- TODO: show tags instead of category as in TIL?
CREATE TABLE website.blogs (
	id         SERIAL8 PRIMARY KEY,
	path       TEXT NOT NULL UNIQUE,
	title      TEXT NOT NULL,
	summary    TEXT,
	content    TEXT,
	created_at TIMESTAMP DEFAULT current_timestamp,
	updated_at TIMESTAMP DEFAULT current_timestamp
);

CREATE TABLE website.tags (
	id SERIAL8 PRIMARY KEY,
	tag STRING NOT NULL UNIQUE
);

CREATE TABLE website.blog_tags (
	blog_id INT8
		REFERENCES website.blogs(id)
		ON DELETE CASCADE,
	tag_id  INT8
		REFERENCES website.tags (id),
	PRIMARY KEY (blog_id, tag_id)
);

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- BOOKSHELF

-- TODO: create table books ();

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- TIL
-- path may change, therefore, it's not the ID.

CREATE TABLE website.til (
	id         SERIAL8 PRIMARY KEY,
	path       TEXT NOT NULL UNIQUE,
	title      TEXT NOT NULL,
	category   TEXT NOT NULL,
	summary    TEXT,
	text       TEXT,
	created_at DATE DEFAULT CURRENT_DATE,
	updated_at DATE DEFAULT CURRENT_DATE
);

CREATE TABLE website.til_tags (
	til_id INT8
	       NOT NULL
	       REFERENCES website.til (id) ON DELETE CASCADE,
	tag_id INT8
	       NOT NULL
	       REFERENCES website.tags (id) ON DELETE CASCADE,
	PRIMARY KEY (til_id, tag_id)
);



-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Pages

CREATE TABLE website.pages (
	path       TEXT NOT NULL,
	version    INT  NOT NULL,
	title      TEXT,
	content    TEXT NOT NULL,
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (path, version)
);



-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- AUTH

create schema if not exists auth;

CREATE TABLE auth.users (
    email VARCHAR(255) PRIMARY KEY,
    hashed_password CHAR(60) NOT NULL,
    created_at timestamp(0) with time zone NOT NULL DEFAULT NOW()
);


-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Update Permissions:

GRANT SELECT, INSERT, UPDATE, DELETE
ON ALL TABLES IN SCHEMA website, auth
TO app;

GRANT USAGE, SELECT ON SEQUENCE website.til_id_seq TO app;
GRANT USAGE, SELECT ON SEQUENCE website.blogs_id_seq TO app;

ALTER TABLE website.til OWNER TO dev;
ALTER TABLE website.pages OWNER TO dev;
ALTER TABLE website.blogs OWNER TO dev;

COMMIT;
